function [fig, p_values, ci, threshold, xData, yData, x, p, sz, std_gaussian, mdl] = normCDF_plotter(coherence_lvls, ...
    rightward_prob, chosen_threshold, left_coh_vals, right_coh_vals, ...
    coherence_frequency, compare_plot, save_name, vel_stair)
%CREATEFIT(COH_LIST,PC_AUD)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : coh_list
%      Y Output: pc
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 10-Aug-2022 10:09:38


% Create a Normal Cumulative Distribution Function (NormCDF)
%
% X input : coherence_lvls
% Y input : rightward_prob
%
% Define the mean and standard deviation of the normal distribution

[xData, yData] = prepareCurveData(coherence_lvls, rightward_prob);

if vel_stair == 1
    xData = flip(xData);
end

mu = mean(yData);
sigma = std(yData);
parms = [mu, sigma];

% Norm CDF Function Fitting
fun_1 = @(b, x)cdf('Normal', x, b(1), b(2));
fun = @(b)sum((fun_1(b,xData) - yData).^2); 
opts = optimset('MaxFunEvals',50000, 'MaxIter',10000); 
fit_par = fminsearch(fun, parms, opts);

% New model to account for weights of PCs
normalcdf_fun = @(b, x) 0.5 * (1 + erf((x - b(1)) ./ (b(2) * sqrt(2))));
if contains(save_name, 'stair') || contains(save_name, 'train')
    % Find the indices of columns in the first row of coherence_frequency that are 0
    columnsToRemove = coherence_frequency(1,:) == 0;
    
    % Remove the corresponding columns from coherence_frequency
    coherence_frequency(:, columnsToRemove) = [];
    
    % Remove the corresponding rows from xData and yData
    xData(columnsToRemove) = [];
    yData(columnsToRemove) = [];
    
    mdl = fitnlm(xData, yData, normalcdf_fun, parms, 'Weights', coherence_frequency(2,:)');
    std_gaussian = mdl.Coefficients{2,1};
else
    mdl = fitnlm(xData, yData, normalcdf_fun, parms);
end



x = min(left_coh_vals):.01:max(right_coh_vals);

[p_values, bootstat, ci] = p_value_calc(yData, parms);
if contains(save_name, 'stair') || contains(save_name, 'train')
    % function weighted by coherence frequency
    p = cdf('Normal', x, mdl.Coefficients{1,1}, mdl.Coefficients{2,1});
else
    % function not weighted by coherence frequency
    p = cdf('Normal', x, fit_par(1), fit_par(2));
    std_gaussian = fit_par(2);
end

threshold_location = find(p >= chosen_threshold, 1);
threshold = x(1, threshold_location);

if contains(save_name, 'stair') || contains(save_name, 'train')
    sz = 10*coherence_frequency(2,:);
else
    sz = 36;
end

fig = 0;

% % Plot fit with data.
% if compare_plot == 1
%     fig = 0;
% elseif compare_plot == 0
%     fig = figure('Name', save_name);
%     
%     % Set color of figure based on block (A, V, or AV)
%     if contains(save_name, 'Aud')
%         scatter(xData, yData, sz, 'LineWidth', 2, 'MarkerEdgeColor', 'r');
%         hold on
%         if vel_stair ~= 1
%             plot(x, p, 'LineWidth', 3, 'Color', 'r');
%         end
%     elseif contains(save_name, 'Vis')
%         scatter(xData, yData, sz, 'LineWidth', 2, 'MarkerEdgeColor', 'b');
%         hold on
%         if vel_stair ~= 1
%             plot(x, p, 'LineWidth', 3, 'Color', 'b');
%         end
%     elseif contains(save_name, 'AV')
%         scatter(xData, yData, sz, 'LineWidth', 2, 'MarkerEdgeColor', 'm');
%         hold on
%         plot(x, p, 'LineWidth', 3, 'Color',  'm')
%     end
%     
%     legend('Participant Responses (scaled by trial amount)', 'NormCDF', 'Location', 'NorthWest', 'Interpreter', 'none');
%     
%     % Label axes
%     title(sprintf('Psych. Function: \n %s',save_name), 'Interpreter','none');
%     xlabel( 'Coherence ((-)Leftward, (+)Rightward)', 'Interpreter', 'none');
%     ylabel( '% Rightward Response', 'Interpreter', 'none');
%     if abs(min(left_coh_vals)) < abs(max(right_coh_vals))
%         xlim([-max(right_coh_vals) max(right_coh_vals)])
%     elseif abs(min(left_coh_vals)) > abs(max(right_coh_vals))
%         xlim([min(left_coh_vals) -min(left_coh_vals)])
%     else
%         xlim([min(left_coh_vals) max(right_coh_vals)])
%     end
%     ylim([0 1])
%     grid on
%     text(0,.2,"std of the slope: " + fit_par(2))
%     set(findall(gcf, '-property', 'FontSize'), 'FontSize', 24)
%     % text(0,.1, "p value for CDF coeffs. (std): " + p_values(2))
%     
%     %text(0,.2,"p value for CDF coeffs. (mean): " + p_values(1))
%     %text(0,.1, "p value for CDF coeffs. (std): " + p_values(2))
% end
end